# Step 1: Install Required Libraries (Uncomment if running fresh)
# !pip install pandas scikit-learn matplotlib seaborn

# Step 2: Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Step 3: Load Dataset
# Example: UCI Pima Indians Diabetes dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
           'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
df = pd.read_csv(url, names=columns)

# Step 4: Explore Dataset
print("Dataset shape:", df.shape)
print(df.head())
sns.countplot(x='Outcome', data=df)
plt.title("Class Distribution")
plt.show()

# Step 5: Preprocessing
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.25, random_state=42)

# Step 6: Train Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 7: Evaluate Model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 8: Predict for new sample (example)
sample = np.array([[2, 120, 70, 25, 100, 30.0, 0.5, 28]])  # Replace with real patient data
sample_scaled = scaler.transform(sample)
prediction = model.predict(sample_scaled)
print("Predicted Outcome:", "Diabetic" if prediction[0] == 1 elseÂ "Non-Diabetic")
